package core

var (
	importTpl = `
// Code generated by protoc-core-go-proto-json. DO NOT EDIT.

package {{.GoPackageName}}

import (
	"fmt"
	"reflect"
	
	"google.golang.org/grpc/encoding"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)
`

	initTpl = `
func init() {
	{{ range  .Messages }}
	// Use Register{{ .GoIdent.GoName }}Codec to register customize codec
	encoding.RegisterCodec({{ .GoIdent.GoName }}ProtoJsonCodec{})
	{{ end }}
}
	`

	codecTpl = `

// Default codec
type {{ .GoIdent.GoName }}ProtoJsonCodec struct {
	protojson.MarshalOptions
	protojson.UnmarshalOptions
}

func (c {{ .GoIdent.GoName }}ProtoJsonCodec) Name() string {
	return "{{.GoPackageName}}.{{ .GoIdent.GoName }}"
}

// Customize codec
func Register{{ .GoIdent.GoName }}Codec(m protojson.MarshalOptions, u protojson.UnmarshalOptions) {
	encoding.RegisterCodec({{ .GoIdent.GoName }}ProtoJsonCodec{m, u})
}

// MarshalJSON implements json.Marshaler
func (msg *{{.GoIdent.GoName}}) MarshalJSON() ([]byte,error) {
	return encoding.GetCodec("{{.GoPackageName}}.{{.GoIdent.GoName}}").Marshal(msg)
}
// UnmarshalJSON implements json.Unmarshaler
func (msg *{{.GoIdent.GoName}}) UnmarshalJSON(b []byte) error {
	return encoding.GetCodec("{{.GoPackageName}}.{{.GoIdent.GoName}}").Unmarshal(b, msg)
}

func (c {{ .GoIdent.GoName }}ProtoJsonCodec) Marshal(v interface{}) ([]byte, error) {
	if vv, ok := v.([]byte); ok {
		return vv, nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("failed to marshal, message is %T, want proto.Message", v)
	}
	return c.MarshalOptions.Marshal(vv)
}

func (c {{ .GoIdent.GoName }}ProtoJsonCodec) Unmarshal(data []byte, v interface{}) error {
	if _, ok := v.(*[]byte); ok {
		reflect.ValueOf(v).Elem().SetBytes(data)
		return nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return fmt.Errorf("failed to unmarshal, message is %T, want proto.Message", v)
	}
	return c.UnmarshalOptions.Unmarshal(data, vv)
}

`
)
