// Code generated by protoc-core-go-proto-json. DO NOT EDIT.

package example

import (
	"fmt"
	"reflect"

	"google.golang.org/grpc/encoding"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

func init() {

	// Use RegisterExampleEnumsCodec to register customize codec
	encoding.RegisterCodec(ExampleEnumsProtoJsonCodec{})

	// Use RegisterEnums2Codec to register customize codec
	encoding.RegisterCodec(Enums2ProtoJsonCodec{})

	// Use RegisterEnums3Codec to register customize codec
	encoding.RegisterCodec(Enums3ProtoJsonCodec{})

}

// Default codec
type ExampleEnumsProtoJsonCodec struct {
	protojson.MarshalOptions
	protojson.UnmarshalOptions
}

func (c ExampleEnumsProtoJsonCodec) Name() string {
	return "example.ExampleEnums"
}

// Customize codec
func RegisterExampleEnumsCodec(m protojson.MarshalOptions, u protojson.UnmarshalOptions) {
	encoding.RegisterCodec(ExampleEnumsProtoJsonCodec{m, u})
}

// MarshalJSON implements json.Marshaler
func (msg *ExampleEnums) MarshalJSON() ([]byte, error) {
	return encoding.GetCodec("example.ExampleEnums").Marshal(msg)
}

// UnmarshalJSON implements json.Unmarshaler
func (msg *ExampleEnums) UnmarshalJSON(b []byte) error {
	return encoding.GetCodec("example.ExampleEnums").Unmarshal(b, msg)
}

func (c ExampleEnumsProtoJsonCodec) Marshal(v interface{}) ([]byte, error) {
	if vv, ok := v.([]byte); ok {
		return vv, nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("failed to marshal, message is %T, want proto.Message", v)
	}
	return c.MarshalOptions.Marshal(vv)
}

func (c ExampleEnumsProtoJsonCodec) Unmarshal(data []byte, v interface{}) error {
	if _, ok := v.(*[]byte); ok {
		reflect.ValueOf(v).Elem().SetBytes(data)
		return nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return fmt.Errorf("failed to unmarshal, message is %T, want proto.Message", v)
	}
	return c.UnmarshalOptions.Unmarshal(data, vv)
}

// Default codec
type Enums2ProtoJsonCodec struct {
	protojson.MarshalOptions
	protojson.UnmarshalOptions
}

func (c Enums2ProtoJsonCodec) Name() string {
	return "example.Enums2"
}

// Customize codec
func RegisterEnums2Codec(m protojson.MarshalOptions, u protojson.UnmarshalOptions) {
	encoding.RegisterCodec(Enums2ProtoJsonCodec{m, u})
}

// MarshalJSON implements json.Marshaler
func (msg *Enums2) MarshalJSON() ([]byte, error) {
	return encoding.GetCodec("example.Enums2").Marshal(msg)
}

// UnmarshalJSON implements json.Unmarshaler
func (msg *Enums2) UnmarshalJSON(b []byte) error {
	return encoding.GetCodec("example.Enums2").Unmarshal(b, msg)
}

func (c Enums2ProtoJsonCodec) Marshal(v interface{}) ([]byte, error) {
	if vv, ok := v.([]byte); ok {
		return vv, nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("failed to marshal, message is %T, want proto.Message", v)
	}
	return c.MarshalOptions.Marshal(vv)
}

func (c Enums2ProtoJsonCodec) Unmarshal(data []byte, v interface{}) error {
	if _, ok := v.(*[]byte); ok {
		reflect.ValueOf(v).Elem().SetBytes(data)
		return nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return fmt.Errorf("failed to unmarshal, message is %T, want proto.Message", v)
	}
	return c.UnmarshalOptions.Unmarshal(data, vv)
}

// Default codec
type Enums3ProtoJsonCodec struct {
	protojson.MarshalOptions
	protojson.UnmarshalOptions
}

func (c Enums3ProtoJsonCodec) Name() string {
	return "example.Enums3"
}

// Customize codec
func RegisterEnums3Codec(m protojson.MarshalOptions, u protojson.UnmarshalOptions) {
	encoding.RegisterCodec(Enums3ProtoJsonCodec{m, u})
}

// MarshalJSON implements json.Marshaler
func (msg *Enums3) MarshalJSON() ([]byte, error) {
	return encoding.GetCodec("example.Enums3").Marshal(msg)
}

// UnmarshalJSON implements json.Unmarshaler
func (msg *Enums3) UnmarshalJSON(b []byte) error {
	return encoding.GetCodec("example.Enums3").Unmarshal(b, msg)
}

func (c Enums3ProtoJsonCodec) Marshal(v interface{}) ([]byte, error) {
	if vv, ok := v.([]byte); ok {
		return vv, nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return nil, fmt.Errorf("failed to marshal, message is %T, want proto.Message", v)
	}
	return c.MarshalOptions.Marshal(vv)
}

func (c Enums3ProtoJsonCodec) Unmarshal(data []byte, v interface{}) error {
	if _, ok := v.(*[]byte); ok {
		reflect.ValueOf(v).Elem().SetBytes(data)
		return nil
	}
	vv, ok := v.(proto.Message)
	if !ok {
		return fmt.Errorf("failed to unmarshal, message is %T, want proto.Message", v)
	}
	return c.UnmarshalOptions.Unmarshal(data, vv)
}
